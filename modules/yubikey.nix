{ config, pkgs, ... }:

with import ../lib;

let
  cfg = config.yubikey;
  u2f_mappings = pkgs.writeText "u2f_mappings" (concatStringsSep "\n" cfg.u2f.mappings);

in {
  options.yubikey = with types; {
    enable = mkEnableOption "Yubikey hardware support, services, and the official CLI and GUI applications";
    u2f.mappings = mkOption {
      type = loeOf str;
      description = ''
        The U2F security key, as e.g. generated by <code>pamu2fcfg</code>.
      '';
    };
  };

  config = mkIf cfg.enable {
    # Enable support for the U2F protocol (FIDO2 is an implementation).
    hardware.u2f.enable = true;

    services.udev.packages = with pkgs; [
      libu2f-host
      yubikey-personalization
    ];

    # These are all official Yubico applications.
    environment.systemPackages = with pkgs; [
      libu2f-host
      # yubico-piv-tool # Privilege and Identification Card (PIV)
      # yubikey-manager
      yubikey-personalization
    ] ++ optionals config.services.xserver.enable [
      # yubioath-desktop # Authenticator
      # yubikey-personalization-gui
    ];

    # Enable support for smartcards (of which Yubikey is one).
    services.pcscd.enable = true;

    # Enable GnuPG and use it for SSH as well rather than `ssh-agent`,
    # because of its support of smartcards like Yubikey.
    # programs.ssh.startAgent = false;
    # programs.gnupg = {
    #   agent.enable = true;
    #   agent.enableSSHSupport = true;
    #   agent.enableBrowserSocket = true;
    #   # agent.enableExtraSocket = true;
    #   # dirmngr.enable = true;
    # };

    # home = genAttrs config.users.realUserNames (userName: {
    #   files.".gnupg/gpg-agent.conf".text = ''
    #     personal-cipher-preferences AES256 AES192 AES CAST5
    #     personal-digest-preferences SHA512 SHA384 SHA256 SHA224
    #     default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
    #     cert-digest-algo SHA512
    #     s2k-digest-algo SHA512
    #     s2k-cipher-algo AES256
    #     charset utf-8
    #     fixed-list-mode
    #     no-comments
    #     no-emit-version
    #     keyid-format 0xlong
    #     list-options show-uid-validity
    #     verify-options show-uid-validity
    #     with-fingerprint
    #     require-cross-certification
    #     use-agent
    #   '';
    # });

    environment.etc."u2f_mappings".source = mkIf (cfg.u2f.mappings != []) u2f_mappings;

    # security.pam.enableU2F = true;
    # security.pam.u2fModuleArgs = mkIf (cfg.u2f.mappings != []) "authfile=${u2f_mappings}";
  };
}
