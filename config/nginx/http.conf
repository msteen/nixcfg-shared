upstream php {
  server unix:/run/phpfpm/phpfpm.sock;
}

# https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
# For static files sendfile is really efficient, because it can be resource efficient.
sendfile on;

# Fill packets before sending, which helps maximizing throughput when serving files.
tcp_nopush on;
# Packets can be delayed up to 0.2 seconds before being send, for each request.
# This setting does not conflict with `tcp_nopush`, because when both are enabled,
# it will only be used for the last packet.
tcp_nodelay on;

# https://licson.net/post/optimizing-nginx-for-large-file-delivery/
# The performance of sendfile degrades with large files, so for larger files
# directio is used, which can optimize reading files in the kernel,
# thus increasing throughput.
directio 1m;
directio_alignment 4k; # btrfs / xfs defaults
aio on; # allows asynchronous IO to be done in kernel

open_file_cache max=65536 inactive=20s;
open_file_cache_valid 30s;
open_file_cache_min_uses 2;
open_file_cache_errors on;

keepalive_requests 256;

client_max_body_size 25M;

client_body_timeout 12s; # maximum time between two successive client body read operations
client_header_timeout 12s; # maximum time in which the complete client request header has to be read
keepalive_timeout 15s;
send_timeout 10s; # maximum time between sending two packats
reset_timedout_connection on; # release the resources of timed out connections

server_tokens off; # omit the nginx version in error messages and the "Server" response header

default_type application/octet-stream;

charset utf-8;
charset_types # text/html is a charset type implicitly
  text/plain
  text/css
  text/xml
  text/javascript
  text/x-js
  application/xml
  application/xhtml+xml
  application/atom+xml
  application/rss+xml
  application/javascript
  application/x-javascript
  application/json;

index index.html index.htm;

gzip on;
gzip_comp_level 5;
gzip_min_length 256;
gzip_proxied any;
gzip_types # text/html is a gzip type implicitly
  text/plain
  text/css
  text/xml
  text/javascript
  text/x-js
  application/xml
  application/xhtml+xml
  application/atom+xml
  application/rss+xml
  application/javascript
  application/x-javascript
  application/json
  application/pdf
  application/postscript
  image/svg+xml
  font/opentype
  application/x-font-ttf
  application/vnd.ms-fontobject;

map $scheme $front_end_https {
  https on;
  default off;
}

# Extra security headers.
add_header Referrer-Policy same-origin;
add_header X-Content-Type-Options nosniff;
# This breaks some Wordpress plugins:
# add_header X-Frame-Options DENY;
add_header X-XSS-Protection "1; mode=block";

# Disallow any connection that we do not explictly support.
server {
  listen 80 default_server;
  listen 443 ssl default_server;
  server_name _;
  ssl_certificate /run/nginx-nixcfg/shared/drop-cert.pem;
  ssl_certificate_key /run/nginx-nixcfg/shared/drop-key.pem;
  return 444;
}

# Redirect www.domain.tld to domain.tld.
server {
  server_name ~^www\.(?<domain>.+)$;
  # A domain change should be permanent,
  # otherwise it could hurt rankings.
  return 301 $scheme://$domain$request_uri;
}
